#!markdown

# FizzBuzz : Les bases

- ##### Cellules de documentation
- ##### Celluleq de code et de résultat
- ##### Fonction `display`
---

#!markdown

## Cellules de documentation

##### Les cellules de documentation sont rédigées au [format MarkdownD](https://www.markdownguide.org/getting-started/).
##### Pour passer en mode édition, cliquer sur l'icône ✎ au dessus de la cellule.
##### Pour revenir en mode présentation, cliquer sur l'icône ✓
---

#!markdown

## Cellules de code et de résultat

##### Voici une cellule de code C#, dans une variante orientée scripting : pas besoin de classe `Program` ni de méthode `Main`.
##### Exécutez un cellule de code en cliquant sur l'icône ▶︎ à sa gauche.
##### S'il y a lieu, un cellule de résultat appataîtra. Elle affiche automatiquement la valeur de la dernière expression de la cellule (notez l'absence de `;` )

#!csharp

IEnumerable<string> FizzBuzzGenerator()
{
    for (var i = 1; true; i++)
    {
        yield return (i % 3, i % 5) switch
        {
            (0, 0) => "FizzBuzz",
            (0, _) => "Fizz",
            (_, 0) => "Buzz",
            (_, _) => i.ToString()
        };
    }
}

var FizzBuzz = FizzBuzzGenerator();

FizzBuzz.Take(15)

#!markdown

---
## La fonction `display`

##### Pour afficher un résultat sans attendre la dernière expression, utilisez la fonction `display`. Cela permet également d'afficher plusieurs résultats successivement.

##### Il est également possible d'utiliser les méthodes de la classe `Console`. Notez que les affichages obtenus diffèrent.

#!csharp

display("Démonstration");

display(FizzBuzz.Take(5));

Console.Write("Depuis Console : ");

Console.WriteLine(FizzBuzz.Take(5));

#!markdown

___
## Mise à jour d'un affichage de résultat

##### La fonction `display` retourne un objet avec une méthode `Update` qui permet de modifier un affichage de résultat spécifique.

##### Au passage, notez l'emploi du mot-clé `await`. Les cellules de code C# se comportent comme le contenu d'une méthode `async`.

#!csharp

display("Démonstration de la mise à jour d'une cellule display");
var myDisplay = display("Attention...");

foreach (var s in FizzBuzz.Take(15))
{
    await Task.Delay(400);
    myDisplay.Update(s);
}

"Terminé"

#!markdown

## Cellule de code en F#

##### Pour ceux qui ont une âme d'artiste.

#!fsharp

let rec fizzBuzzGenerator i =
    seq {
        yield
            match i % 3, i % 5 with
            | 0, 0 -> "FizzBuzz"
            | 0, _ -> "Fizz"
            | _, 0 -> "Buzz"
            | _ -> string i
        yield! fizzBuzzGenerator (i + 1)
    }

let fizzBuzz5 = 
    fizzBuzzGenerator 1
    |> Seq.take 5
    |> Seq.toList

display fizzBuzz5

printfn "%A" fizzBuzz5
